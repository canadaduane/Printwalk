(function() {
  var GCode, util;

  util = require('util');

  GCode = (function() {

    function GCode() {
      var key, options, _ref;
      this.reverse_lookup = {};
      _ref = this.codes;
      for (key in _ref) {
        options = _ref[key];
        this.reverse_lookup[options.id] = {
          code: key,
          name: options.name,
          params: options.params
        };
      }
    }

    GCode.prototype.get_options = function(code) {
      return this.codes[code];
    };

    GCode.prototype.get_code = function(id) {
      return this.reverse_lookup[id];
    };

    GCode.prototype.codes = {
      G0: {
        name: 'Coordinated Movement',
        params: [
          {
            key: 'x',
            type: 'float',
            name: 'X-Axis Movement',
            re: /X([\.\d]+)/
          }, {
            key: 'y',
            type: 'float',
            name: 'Y-Axis Movement',
            re: /Y([\.\d]+)/
          }, {
            key: 'z',
            type: 'float',
            name: 'Z-Axis Movement',
            re: /Z([\.\d]+)/
          }, {
            key: 'e',
            type: 'float',
            name: 'Extruder Distance',
            re: /E([\.\d]+)/
          }
        ]
      },
      G1: {
        id: 'move',
        name: 'Coordinated Movement',
        params: [
          {
            key: 'x',
            type: 'float',
            name: 'X-Axis Movement'
          }, {
            key: 'y',
            type: 'float',
            name: 'Y-Axis Movement'
          }, {
            key: 'z',
            type: 'float',
            name: 'Z-Axis Movement'
          }, {
            key: 'e',
            type: 'float',
            name: 'Extruder Distance'
          }
        ]
      },
      G2: {
        id: 'cwarc',
        name: 'Clockwise Arc'
      },
      G3: {
        id: 'ccwarc',
        name: 'Counter-clockwise Arc'
      },
      G4: {
        id: 'dwell',
        name: 'Dwell',
        params: [
          {
            key: 's',
            type: 'int',
            name: 'Seconds'
          }, {
            key: 'm',
            type: 'int',
            name: 'Milliseconds'
          }
        ]
      },
      G28: {
        id: 'home',
        name: 'Home All Axes'
      },
      G90: {
        id: 'abscoord',
        name: 'Use Absolute Coordinates'
      },
      G91: {
        id: 'relcoord',
        name: 'Use Relative Coordinates'
      },
      G92: {
        id: 'goto',
        name: 'Set Absolute Position',
        params: [
          {
            key: 'x',
            type: 'float',
            name: 'X-Axis Movement'
          }, {
            key: 'y',
            type: 'float',
            name: 'Y-Axis Movement'
          }, {
            key: 'z',
            type: 'float',
            name: 'Z-Axis Movement'
          }, {
            key: 'e',
            type: 'float',
            name: 'Extruder Distance'
          }
        ]
      },
      M104: {
        id: 'settemp',
        name: 'Set Hotend Temperature',
        params: [
          {
            key: 's',
            type: 'float',
            name: 'Degrees Celsius',
            re: /S([\.\d]+)/
          }
        ]
      },
      M140: {
        id: 'setbedtemp',
        name: 'Set Bed Temperature',
        params: [
          {
            key: 's',
            type: 'float',
            name: 'Degrees Celsius',
            re: /S([\.\d]+)/
          }
        ]
      },
      M105: {
        id: 'gettemp',
        name: 'Get Temperature'
      },
      M106: {
        id: 'fanon',
        name: 'Fan On'
      },
      M107: {
        id: 'fanoff',
        name: 'Fan Off'
      },
      M109: {
        id: 'waittemp',
        name: 'Wait For Hotend Temperature Equilibrium'
      },
      M114: {
        id: 'getpos',
        name: 'Get Absolute Position'
      },
      M17: {
        id: 'enablemotors',
        name: 'Enable/Power Stepper Motors'
      },
      M18: {
        id: 'disablemotors',
        name: 'Disable Stepper Motors'
      },
      M20: {
        name: 'List SD Card'
      },
      M21: {
        name: 'Init SD Card'
      },
      M22: {
        name: 'Release SD Card'
      },
      M23: {
        name: 'Select SD file',
        params: ['%s<Filename>']
      },
      M24: {
        name: 'Start/Resume SD Print'
      },
      M25: {
        name: 'Pause SD Print'
      },
      M26: {
        name: 'Set SD Position in Bytes',
        params: ["S%d<Byte Offset>"]
      },
      M27: {
        name: 'Report SD Print Status'
      },
      M28: {
        name: 'Start SD Write',
        params: ['%s<Filename>']
      },
      M29: {
        name: 'Stop SD Write'
      },
      M30: {
        name: 'Get Time Since Last M109 or SD Card Start to Serial'
      },
      M42: {
        name: 'Change Pin Status via GCode'
      },
      M80: {
        id: 'poweron',
        name: 'Turn On Power Supply'
      },
      M81: {
        id: 'poweroff',
        name: 'Turn Off Power Supply'
      },
      M82: {
        id: 'ecodesabs',
        name: 'Set E codes absolute (default)'
      },
      M83: {
        id: 'ecodesrel',
        name: 'Set E codes relative while in Absolute Coordinates (G90) mode'
      },
      M84: {
        id: 'disablesteppers',
        name: 'Disable Steppers until next move'
      },
      M85: {
        id: 'inactivitytimeout',
        name: 'Set inactivity shutdown timer',
        params: ['S%d<Seconds>']
      },
      M92: {
        name: 'Set axis_steps_per_unit - same syntax as G92'
      },
      M115: {
        name: 'Get Capabilities String'
      },
      M119: {
        name: 'Get Endstop Status'
      },
      M190: {
        id: 'waitbedtemp',
        name: 'Wait For Bed Temperature Equilibrium'
      },
      M200: {
        id: 'setfildia',
        name: 'Set Filament Diameter'
      },
      M400: {
        id: 'finishmove',
        name: 'Finish all moves'
      },
      M502: {
        id: 'factoryreset',
        name: 'Revert to Factory Settings'
      }
    };

    return GCode;

  })();

  module.exports.GCode = GCode;

}).call(this);
