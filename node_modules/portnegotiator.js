(function() {
  var EventEmitter, PortNegotiator, array_equal, fs, interval, timeout, util, _;
  var __hasProp = Object.prototype.hasOwnProperty, __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; }, __indexOf = Array.prototype.indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (__hasProp.call(this, i) && this[i] === item) return i; } return -1; };

  util = require('util');

  fs = require('fs');

  _ = require('./underscore');

  EventEmitter = require('events').EventEmitter;

  array_equal = function(a, b) {
    return _.all(_.zip(a, b), function(k) {
      return k[0] === k[1];
    });
  };

  interval = function(milliseconds, fn) {
    return setInterval(fn, milliseconds);
  };

  timeout = function(milliseconds, fn) {
    return setTimeout(fn, milliseconds);
  };

  PortNegotiator = (function() {

    __extends(PortNegotiator, EventEmitter);

    PortNegotiator.prototype.default_file_pattern = /^tty\.usb.*/;

    function PortNegotiator(file_pattern) {
      var _this = this;
      this.file_pattern = file_pattern;
      util.puts('constructor');
      this.attached = null;
      this.ports = [];
      this.poll_at(300);
      this.on('change', function(old_list, new_list) {
        return _this.change(old_list, new_list);
      });
      this.on('attach', function(port) {
        return _this.attach(port);
      });
      this.on('detach', function(port) {
        return _this.detach(port);
      });
    }

    PortNegotiator.prototype.poll_at = function(milliseconds) {
      var _this = this;
      if (this.polling) clearInterval(this.polling);
      return this.polling = interval(milliseconds, function() {
        return _this.poll_new_ports();
      });
    };

    PortNegotiator.prototype.poll_new_ports = function() {
      var _this = this;
      return this.get_ports(function(ports) {
        var new_list, old_list, _ref;
        if (!array_equal(ports, _this.ports)) {
          _ref = [_this.ports, ports], old_list = _ref[0], new_list = _ref[1];
          _this.ports = ports;
          return _this.emit('change', old_list, new_list);
        }
      });
    };

    PortNegotiator.prototype.get_ports = function(callback) {
      var pattern, _ref;
      pattern = (_ref = this.file_pattern) != null ? _ref : this.default_file_pattern;
      return fs.readdir('/dev', function(err, files) {
        var f;
        return callback((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = files.length; _i < _len; _i++) {
            f = files[_i];
            if (f.match(pattern)) _results.push(f);
          }
          return _results;
        })());
      });
    };

    PortNegotiator.prototype.choose = function(port) {
      if (__indexOf.call(this.ports, port) >= 0 && this.attached === null) {
        this.emit('attach', port);
        return true;
      } else {
        return false;
      }
    };

    PortNegotiator.prototype.disconnect = function() {
      return this.emit('detach');
    };

    PortNegotiator.prototype.reconnect = function() {
      this.ports = [];
      return this.emit('detach');
    };

    PortNegotiator.prototype.change = function(old_list, new_list) {
      var delta;
      delta = new_list.length - old_list.length;
      switch (delta) {
        case 1:
          return this.emit('attach', _.difference(new_list, old_list)[0]);
        case -1:
          return this.emit('detach', _.difference(old_list, new_list)[0]);
        case 0:
          throw "Port list didn't change";
          break;
        default:
          if (delta >= 2) return this.emit('choice', new_list);
      }
    };

    PortNegotiator.prototype.attach = function(port) {
      this.poll_at(3000);
      this.attached = port;
      return util.puts("attach " + port);
    };

    PortNegotiator.prototype.detach = function(port) {
      this.poll_at(300);
      this.attached = null;
      return util.puts("detach " + port);
    };

    return PortNegotiator;

  })();

  module.exports.PortNegotiator = PortNegotiator;

}).call(this);
