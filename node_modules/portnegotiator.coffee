util = require('util')
fs = require('fs')
_ = require('./underscore')
EventEmitter = require('events').EventEmitter

array_equal = (a, b) ->
    _.all(_.zip(a, b), (k) -> k[0] == k[1] )

interval = (milliseconds, fn) -> setInterval fn, milliseconds
timeout = (milliseconds, fn) -> setTimeout fn, milliseconds

# Watches for USB devices and emits events when important changes occur
# such as a device being attached in or detached.
class PortNegotiator extends EventEmitter
    default_file_pattern: /^tty\.usb.*/ # Mac OS X

    constructor: (@file_pattern) ->
        util.puts 'constructor'
        @attached = null
        @ports = []
        @poll_at 300

        @on 'change', (old_list, new_list) => @change(old_list, new_list)
        @on 'attach', (port) => @attach(port)
        @on 'detach', (port) => @detach(port)
    
    poll_at: (milliseconds) ->
        clearInterval(@polling) if @polling
        @polling = interval milliseconds, => @poll_new_ports()
    
    poll_new_ports: ->
        @get_ports (ports) =>
            if not array_equal(ports, @ports)
                [old_list, new_list] = [@ports, ports]
                @ports = ports
                @emit('change', old_list, new_list)

    get_ports: (callback) ->
        pattern = @file_pattern ? @default_file_pattern
        fs.readdir '/dev', (err, files) ->
            callback(f for f in files when f.match(pattern))
    
    choose: (port) ->
        if port in @ports and @attached is null
            @emit('attach', port)
            return true
        else
            return false
    
    disconnect: ->
        @emit 'detach'
    
    reconnect: ->
        @ports = []
        @emit 'detach'
    
    # ------ #
    # Events #
    # ------ #

    # Port list change event
    change: (old_list, new_list) ->
        delta = new_list.length - old_list.length
        switch delta
            when 1 then @emit('attach', _.difference(new_list, old_list)[0])
            when -1 then @emit('detach', _.difference(old_list, new_list)[0])
            when 0 then throw "Port list didn't change"
            else
                @emit('choice', new_list) if delta >= 2
    
    attach: (port) ->
        @poll_at 3000 # Slow polling down since we are less likely to have new events
        @attached = port
        util.puts "attach #{port}"
    
    detach: (port) ->
        @poll_at 300 # Start faster polling so we can be responsive in case re-attach occurs
        @attached = null
        util.puts "detach #{port}"

module.exports.PortNegotiator = PortNegotiator